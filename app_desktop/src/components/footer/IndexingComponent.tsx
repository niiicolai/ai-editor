import { useDispatch, useSelector } from "react-redux";
import { RootState } from "../../store";
import { Clipboard, Loader2Icon } from "lucide-react";
import { useParseFileContent } from "../../hooks/useParseFileContent";
import { useHash } from "../../hooks/useHash";
import { useProjectIndexFile } from "../../hooks/useProjectIndexFile";
import { useEffect } from "react";
import {
  setIsLoading as setIsLoadingIndex,
  setItems,
  setMeta,
} from "../../features/projectIndex";
import {
  ProjectIndexItemClassType,
  ProjectIndexItemFunctionType,
  ProjectIndexItemType,
  ProjectIndexItemVarType,
} from "../../types/projectIndexType";
import { useFiles } from "../../hooks/useFiles";
import { useReadFile } from "../../hooks/useReadFile";
import { FileItemType } from "../../types/directoryInfoType";
import { useCreateProjectIndexItem } from "../../hooks/useProjectIndexItem";
import { useNavigate } from "react-router-dom";
import { useIgnoreAi } from "../../hooks/useIgnoreAi"; 
import { useEmbeddingFiles } from "../../hooks/useEmbeddingFiles";

export default function IndexingComponent() {
  const projectIndex = useSelector((state: RootState) => state.projectIndex);
  const hierarchy = useSelector((state: RootState) => state.hierarchy);
  const { currentPath, directoryState } = hierarchy;

  const embedding = useEmbeddingFiles();

  const readFile = useReadFile();
  const parseFile = useParseFileContent();
  const hash = useHash();
  const projectIndexFile = useProjectIndexFile();
  const createProjectIndexItem = useCreateProjectIndexItem();
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const _files = useFiles();
  const ignoreAi = useIgnoreAi();

  const backendIndexing = async () => {
    dispatch(setIsLoadingIndex(true));
    if (Object.keys(projectIndex.items).length === 0) {
      return dispatch(setIsLoadingIndex(false));
    }

    if (!currentPath) {
      return dispatch(setIsLoadingIndex(false));
    }
    let currentProjectIndexFile = null;
    try {
      currentProjectIndexFile = await projectIndexFile.read(currentPath);
      if (!currentProjectIndexFile?._id) {

        //currentProjectIndexFile = await projectIndexFile.write(currentPath);
      }
    } catch {
      return dispatch(setIsLoadingIndex(false));
    }

    if (!currentProjectIndexFile?._id) {
      return dispatch(setIsLoadingIndex(false));
    }
    try {
      if (projectIndex.meta?.name != currentPath) {
        dispatch(
          setMeta({
            name: projectIndex.meta?.name ?? "",
            _id: currentProjectIndexFile._id,
          })
        );
      }

      const newItems = {} as ProjectIndexItemType;
      console.log("Project Index:", projectIndex.items);
      for (const key in projectIndex.items) {
        if (projectIndex.items[key].ignore) {
          console.log("Ignoring file:", projectIndex.items[key].name);
          continue;
        }

        if (projectIndex.items[key]._id) {
          console.log("File already indexed:", projectIndex.items[key].name);
          newItems[key] = projectIndex.items[key];
          continue;
        }

        const item = projectIndex.items[key];
        const data = await readFile.read({
          name: item.name,
          path: item.path,
          isDirectory: false,
        });

        const savedItem = await createProjectIndexItem.mutateAsync({
          name: item.name,
          path: item.path,
          content: data?.content || "",
          lines: item.lines,
          language: item.language,
          hashCode: item.hashCode,
          description: item.description,
          functions: JSON.stringify(
            (item.functions as ProjectIndexItemFunctionType[]) ?? []
          ),
          classes: JSON.stringify(
            (item.classes as ProjectIndexItemClassType[]) ?? []
          ),
          vars: JSON.stringify((item.vars as ProjectIndexItemVarType[]) ?? []),
          projectIndexId: currentProjectIndexFile._id,
        }) as any;
        console.log("Saved item:", savedItem);

        newItems[item.path] = {
          ...item,
          _id: savedItem[0]._id,
        };
      }

      dispatch(
        setItems({
          ...projectIndex.items,
          ...newItems,
        })
      );
    } catch {
      
    } finally {
      dispatch(setIsLoadingIndex(false));
    }
  };

  const clientIndexing = async () => {

    if (!currentPath) {
      return;
    }

    if (projectIndex.meta?.name != currentPath) {
      dispatch(
        setMeta({ name: currentPath, _id: projectIndex.meta?._id ?? null })
      );
    }
    
    const ignoreFiles = await ignoreAi.read(currentPath);
    const newItems = {} as ProjectIndexItemType;
    for (const key in hierarchy.directoryState) {
      const files = hierarchy.directoryState[key].files;
      const allFiles = [] as FileItemType[];
      for (const file of files) {
        if (file.isDirectory) {
          if (ignoreFiles?.includes(file.name)) continue;
          const directoryFiles = await _files.readDirectory(file.path);
          allFiles.push(...directoryFiles);
        } else {
          allFiles.push(file);
        }
      }

      for (const f of allFiles) {
        if (projectIndex.items[f.path]) continue;
        if (f.isDirectory) continue;

        const data = await readFile.read(f);
        const parsedData = await parseFile.parse(
          data?.content || "",
          data?.language || ""
        );
        const hashCode = hash.hash(data?.content || "", "sha256");
        newItems[f.path] = {
          _id: "",
          name: f.name,
          path: f.path,
          lines: parsedData?.lines || 0,
          language: data?.language || "",
          hashCode: hashCode,
          description: parsedData?.description || "",
          functions:
            (parsedData?.functions as ProjectIndexItemFunctionType[]) ?? [],
          classes: (parsedData?.classes as ProjectIndexItemClassType[]) ?? [],
          vars: (parsedData?.vars as ProjectIndexItemVarType[]) ?? [],
          ignore: ignoreFiles?.includes(f.name) || false,
        };
      }
    }
    dispatch(
      setItems({
        ...projectIndex.items,
        ...newItems,
      })
    );
  };

  useEffect(() => {
    if (currentPath && Object.entries(directoryState).length > 0) {
      embedding.synchronize();
      //clientIndexing();
      //backendIndexing();


    /*
      const embedding = [0.015031191520392895,0.03973271697759628,-0.02338367886841297,0.06372784823179245,-0.005140510853379965,-0.049470607191324234,0.07868458330631256,0.03575306758284569,-0.0020702809561043978,-0.007041487377136946,0.017928358167409897,-0.08162287622690201,0.003419716376811266,0.03026498854160309,-0.013932855799794197,-0.0667746365070343,0.014973335899412632,-0.03013100102543831,-0.07880394905805588,0.005995118524879217,-0.053337544202804565,-0.026138613000512123,-0.033209577202796936,0.027369415387511253,-0.020306318998336792,0.021272215992212296,-0.0686357393860817,0.03151610493659973,0.026471788063645363,-0.05351096764206886,0.04189714789390564,0.04046127572655678,0.03285157307982445,0.02796386368572712,0.06092596426606178,0.03576407954096794,0.02528250776231289,0.014801066368818283,0.010077063925564289,-0.004219760186970234,-0.0045211827382445335,-0.12538963556289673,0.03192497417330742,-0.014995844103395939,0.031084077432751656,0.035024430602788925,-0.014378041960299015,0.061861421912908554,-0.05602115020155907,0.015304084867238998,-0.02241036854684353,-0.040564801543951035,-0.028835611417889595,-0.04897456616163254,-0.022156743332743645,0.02543075941503048,-0.007838726975023746,-0.016752518713474274,0.0452326275408268,0.03756178542971611,0.04920763149857521,-0.02487396076321602,-0.02992500551044941,0.058600910007953644,0.018553471192717552,0.023469211533665657,0.009016826748847961,-0.024819936603307724,-0.04987918958067894,-0.03038746304810047,-0.01340235210955143,0.022430390119552612,0.029705535620450974,0.06515289098024368,0.07267004251480103,-0.006978037767112255,0.002886812435463071,-0.06788481026887894,0.05806408450007439,-0.014649884775280952,-0.06996753811836243,-0.03039991669356823,-0.05142749473452568,0.0511271096765995,0.013110224157571793,0.07990211248397827,0.10344332456588745,0.029609471559524536,-0.1197068840265274,0.008730478584766388,0.011384239420294762,0.04499661549925804,-0.016210472211241722,0.00020768838294316083,-0.03799271956086159,0.00931672751903534,0.0068366569466888905,-0.016138872131705284,-0.029505277052521706,0.25840702652931213,0.0444365032017231,0.03167025372385979,-0.010677436366677284,-0.02601459249854088,-0.07020294666290283,-0.03475881740450859,-0.013007444329559803,-0.05743783712387085,0.07694283872842789,0.023601332679390907,-0.06176438182592392,-0.011029796674847603,0.03526030108332634,0.03945120796561241,0.032094806432724,-0.05764370411634445,-0.06919008493423462,0.060267236083745956,-0.030656317248940468,0.025526395067572594,0.056578412652015686,0.00431772880256176,-0.0021457800175994635,-0.010170388966798782,0.03153118118643761,-0.034276045858860016,0.07365196943283081,-4.589736427226838e-33,0.021729951724410057,-0.12263768911361694,0.055207882076501846,0.09948456287384033,-0.051771070808172226,0.033120349049568176,-0.009393053129315376,0.05373649671673775,-0.0025191938038915396,0.06467606127262115,0.008059363812208176,-0.005559633485972881,-0.025301596149802208,0.020993448793888092,0.1097210943698883,0.11197401583194733,-0.02723422832787037,0.005040495656430721,-0.04933179169893265,0.027484463527798653,-0.027815520763397217,-0.04101400822401047,0.012629935517907143,-0.037472959607839584,-0.07384081184864044,-0.045540034770965576,-0.0007244115113280714,-0.01893654093146324,0.03146056458353996,0.0006879396387375891,-0.04018574580550194,0.01981360837817192,-0.07332383841276169,0.07790341973304749,-0.02386779524385929,-0.011907416395843029,0.0180875975638628,-0.027770398184657097,0.016352683305740356,-0.018042074516415596,-0.04033007100224495,-0.010214587673544884,-0.001111246645450592,0.04711846262216568,0.03269530460238457,-0.0243831854313612,-0.024005291983485222,-0.020213715732097626,0.04799262806773186,-0.000976767623797059,-0.013768758624792099,0.015160688199102879,-0.07444395869970322,-0.029434572905302048,-0.02369137853384018,0.047676946967840195,0.01874542608857155,-0.065806545317173,-0.030311351642012596,0.05402036011219025,0.07341846823692322,0.02346356213092804,-0.04887798801064491,0.0523701049387455,-0.03216473013162613,-0.02807675302028656,-0.06266657263040543,-0.0954362079501152,0.04784439131617546,0.04679866135120392,-0.03538576886057854,-0.07512227445840836,0.026409002020955086,0.03426363691687584,-0.02863619104027748,-0.0369194820523262,-0.006887523457407951,0.07998950779438019,-0.018850749358534813,-0.05716133862733841,0.09591411054134369,-0.07021897286176682,0.034596364945173264,-0.05242634192109108,0.01158830150961876,0.006111087743192911,-0.0029863694217056036,-0.11347904056310654,0.005037427879869938,-0.07056432962417603,-0.020478034391999245,0.029613420367240906,0.009584525600075722,-0.01370989065617323,0.07456488907337189,3.943846729830131e-33,-0.024763448163866997,0.029749389737844467,-0.05263159051537514,0.14134101569652557,0.051754169166088104,-0.03242621198296547,0.14276646077632904,-0.0131356967613101,-0.06459378451108932,0.1234283596277237,0.02244543470442295,-0.04065050557255745,0.05906892567873001,0.0021510247606784105,-0.0041616833768785,0.02543438784778118,0.04589236527681351,-0.08103019744157791,-0.04622482880949974,-0.023732339963316917,-0.0896616131067276,0.06015664339065552,0.0024178875610232353,-0.00251748482696712,-0.10536585748195648,0.025502262637019157,0.04931066930294037,-0.03936215862631798,-0.004265202675014734,-0.03715590015053749,0.0806417390704155,0.00893468875437975,-0.048693832010030746,0.06283916532993317,0.05993904173374176,0.028694717213511467,0.15490712225437164,-0.01752118393778801,-0.023376671597361565,0.05498552322387695,0.057972244918346405,0.05354853719472885,0.041057292371988297,0.10155557841062546,-0.03387530520558357,0.060639772564172745,0.010195079259574413,-0.05018790438771248,0.03395702317357063,0.03836311027407646,-0.06515570729970932,0.01915968582034111,0.009090520441532135,-0.03391219303011894,-0.009248794056475163,-0.03154889494180679,-0.05464496836066246,0.012228379026055336,-0.026367010548710823,0.005063239950686693,-0.06704773753881454,0.07896340638399124,-0.028663523495197296,0.05269743129611015,-0.07285698503255844,-0.02312142588198185,-0.045524101704359055,0.06088457629084587,0.06052564084529877,0.031195491552352905,0.015247042290866375,0.021149659529328346,-0.04746188223361969,-0.010208259336650372,0.0355534665286541,-0.020601022988557816,-0.11714451760053635,0.008978514932096004,-0.0072648413479328156,-0.0507764033973217,-0.0690041035413742,-0.07810906320810318,-0.05317220464348793,0.0782799944281578,-0.05236809700727463,0.053635526448488235,0.040144987404346466,0.046057116240262985,-0.04671235755085945,0.011785190552473068,0.05128902941942215,0.025604523718357086,-0.014257431030273438,-0.05279804393649101,-0.003000217489898205,-1.4230670863923933e-8,-0.045651182532310486,-0.0858197808265686,0.04566487669944763,0.012617353349924088,-0.028320590034127235,0.007216245401650667,-0.026115546002984047,-0.027357375249266624,-0.025997670367360115,0.029181791469454765,0.05521538481116295,0.030487077310681343,-0.036509402096271515,0.07847346365451813,0.046219613403081894,-0.09006711095571518,-0.03849630430340767,0.046299856156110764,-0.011651412583887577,0.03947020694613457,-0.08114445209503174,0.03366033360362053,0.010896453633904457,0.04888380318880081,-0.041340172290802,0.052951641380786896,0.042393285781145096,0.13303229212760925,-0.0012180840130895376,-0.008694482035934925,0.06070486456155777,0.04239896312355995,-0.040082793682813644,-0.07806913554668427,0.0005587562918663025,0.034639209508895874,-0.013519207946956158,0.0009195031016133726,0.03193294256925583,0.03707338124513626,-0.0729997381567955,0.009550639428198338,0.04198654368519783,-0.049521010369062424,-0.05606190115213394,-0.08057475090026855,-0.029529506340622902,-0.0409681499004364,-0.01987297832965851,-0.08689644187688828,-0.03091476857662201,0.007373050786554813,0.018751583993434906,0.010001749731600285,0.035906996577978134,-0.02590862289071083,0.007427192758768797,0.013473638333380222,-0.12806589901447296,0.07308226078748703,0.19682854413986206,-0.0141926109790802,0.05697551742196083,-0.04315626993775368]

      
      textSearchEmbeddedFiles.search('test', 'test').then((r)=>console.log('textSearchEmbeddedFiles', r))
      vectorSearchEmbeddedFiles.search('test', embedding).then((r)=>console.log('vectorSearchEmbeddedFiles', r))

      
      createEmbeddedFile.mutateAsync({
        filename: 'test',
        filepath: 'test',
        description: 'test',
        embedding,
        project_id: 'test',
        created_at: new Date().toLocaleString(),
        updated_at: new Date().toLocaleString(),
        hash: 'test'
      }).then((r) => console.log(r))
      return () => {}*/
    }
  }, [currentPath, directoryState]);

  return (
    <>
      {projectIndex.meta && (
        <div className="flex justify-start items-center gap-1">
          {projectIndex.isLoading ? (
            <Loader2Icon className="w-3.5 h-3.5 animate-spin" />
          ) : (
            <Clipboard className="w-3.5 h-3.5" />
          )}
          <button
            className="text-xs button-main flex justify-between gap-1"
            onClick={() => navigate("/project-index")}
          >
            <span>Project Index</span>
          </button>
        </div>
      )}
    </>
  );
}
