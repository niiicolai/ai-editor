name: Deploy App Client

on:
  push:
    branches:
      - release-app-client

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Create .env file
        run: | 
          cd ./app_client
          echo "${{ secrets.APP_CLIENT_ENV_FILE }}" > .env    

      - name: Install dependencies
        run: | 
          cd ./app_client
          npm install

      - name: Remove .env file
        run: |
          cd ./app_client
          rm .env
  
  test:
    needs: build
    runs-on: ubuntu-latest
    env:
      MONGO_HOST: 127.0.0.1 
      RABBITMQ_HOST: 127.0.0.1
    services:
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672  
          - 15672:15672 
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      # https://engineering.synatic.com/a-simple-way-to-run-a-mongodb-replica-set-in-github-actions
      - name: Start mongo
        id: start-mongo
        run: docker run --rm -d -p 27017:27017 --name mongo  mongo:4.4.9 --replSet test --bind_ip_all
      - name: Initialize MongoDB Replica Set
        run: |
          sleep 5 # Give mongo a chance to start up
          docker run --rm mongo:6.0 mongosh --host 172.17.0.1 --eval 'rs.initiate({_id: "test", members: [{_id: 0, host: "172.17.0.1:27017"}]})'
          
      - name: Install mongosh
        run: |
          wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh

      - name: Create .env file
        run: |
          cd ./app_client
          echo "${{ secrets.APP_CLIENT_TEST_ENV_FILE }}" > .env   

      - name: Install dependencies
        run: |
          cd ./app_client
          npm install

      - name: Start frontend server in the background
        run: |
          cd ./app_client
          npm run dev &

      - name: Wait for frontend server to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:5173 > /dev/null; then
              echo "Frontend server is ready!"
              exit 0
            fi
            echo "Waiting for frontend server to be ready..."
            sleep 2
          done
          echo "Frontend server did not become ready in time!"
          exit 1

      - name: Create agent service .env file
        run: |
          cd ./agent_service
          echo "${{ secrets.AGENT_TEST_ENV_FILE }}" > .env   
        
      - name: Install agent service dependencies
        run: |
          cd ./agent_service
          npm install

      - name: Start agent service in the background
        run: |
          cd ./agent_service
          npm start &

      - name: Wait for agent service server to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:3001 > /dev/null; then
              echo "Frontend server is ready!"
              exit 0
            fi
            echo "Waiting for agent service server to be ready..."
            sleep 2
          done
          echo "agent service server did not become ready in time!"
          exit 1

      - name: Create docs service .env file
        run: |
          cd ./docs_service
          echo "${{ secrets.DOCS_TEST_ENV_FILE }}" > .env   
        
      - name: Install docs service dependencies
        run: |
          cd ./docs_service
          npm install

      - name: Start docs service in the background
        run: |
          cd ./docs_service
          npm start &
          
      - name: Wait for docs service server to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:3004 > /dev/null; then
              echo "Frontend server is ready!"
              exit 0
            fi
            echo "Waiting for docs service server to be ready..."
            sleep 2
          done
          echo "docs service server did not become ready in time!"
          exit 1

      - name: Create email service .env file
        run: |
          cd ./email_service
          echo "${{ secrets.EMAIL_TEST_ENV_FILE }}" > .env   
        
      - name: Install email service dependencies
        run: |
          cd ./email_service
          npm install

      - name: Start email service in the background
        run: |
          cd ./email_service
          npm start &
          
      - name: Wait for email service server to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:3006 > /dev/null; then
              echo "Frontend server is ready!"
              exit 0
            fi
            echo "Waiting for email service server to be ready..."
            sleep 2
          done
          echo "email service server did not become ready in time!"
          exit 1

      - name: Create rag evaluation service .env file
        run: | 
          cd ./rag_evaluation_service
          echo "${{ secrets.RAG_EVALUATION_TEST_ENV_FILE }}" > .env    

      - name: Install rag evaluation service dependencies
        run: | 
          cd ./rag_evaluation_service
          python -m pip install --upgrade pip
          pip install wheel
          pip install "fastapi[standard]"
          pip install -r requirements.txt

      - name: Start rag evaluation service in the background
        run: |
          cd ./rag_evaluation_service
          python main.py &
          
      - name: Wait for rag evaluation service server to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:3005 > /dev/null; then
              echo "Frontend server is ready!"
              exit 0
            fi
            echo "Waiting for rag evaluation service server to be ready..."
            sleep 2
          done
          echo "rag evaluation service server did not become ready in time!"
          exit 1

      - name: Create payment service .env file
        run: |
          cd ./payment_service
          echo "${{ secrets.PAYMENT_TEST_ENV_FILE }}" > .env   
        
      - name: Install payment service dependencies
        run: |
          cd ./payment_service
          npm install

      - name: Start payment service in the background
        run: |
          cd ./payment_service
          npm start &
          
      - name: Wait for payment service server to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:3002 > /dev/null; then
              echo "Frontend server is ready!"
              exit 0
            fi
            echo "Waiting for payment service server to be ready..."
            sleep 2
          done
          echo "payment service server did not become ready in time!"
          exit 1
      
      - name: Create auth service .env file
        run: |
          cd ./auth_service
          echo "${{ secrets.AUTH_TEST_ENV_FILE }}" > .env   
        
      - name: Install auth service dependencies
        run: |
          cd ./auth_service
          npm install
          npm run mongo:migrate

      - name: Start auth service in the background
        run: |
          cd ./auth_service
          sh ./wait_for_dependencies.sh
          npm start &
          
      - name: Wait for auth service server to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Frontend server is ready!"
              exit 0
            fi
            echo "Waiting for auth service server to be ready..."
            sleep 2
          done
          echo "auth service server did not become ready in time!"
          exit 1

      - name: Run E2E tests
        run: |
          cd ./app_client
          npx cypress run

      - name: Remove agent .env file
        run: |
          cd ./agent_service
          rm .env
      - name: Remove payment .env file
        run: |
          cd ./payment_service
          rm .env
      - name: Remove auth .env file
        run: |
          cd ./auth_service
          rm .env
      - name: Remove docs .env file
        run: |
          cd ./docs_service
          rm .env
      - name: Remove email .env file
        run: |
          cd ./email_service
          rm .env
      - name: Remove rag evaluation .env file
        run: |
          cd ./rag_evaluation_service
          rm .env
      - name: Remove frontend .env file
        run: |
          cd ./app_client
          rm .env
         
  deploy:
    needs: 
      - build
      - test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create .env file
      run: |
          cd ./app_client
          echo "${{ secrets.APP_CLIENT_ENV_FILE }}" > .env

    - name: SSH and Remove old files
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          rm -rf ${{ secrets.SERVER_LOCATION }}/github/workspace/app_client
    
    - name: SCP files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: "${{ secrets.SERVER_HOST }}"
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "${{ github.workspace }}/app_client"
        target: "${{ secrets.SERVER_LOCATION }}"
    
    - name: SSH and Docker build
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ secrets.SERVER_LOCATION }}/github/workspace/app_client
          docker build -t ${{ secrets.APP_CLIENT_IMAGE_NAME }}:${{ secrets.APP_CLIENT_IMAGE_TAG }} .
          docker image prune -f
          k3d image import ${{ secrets.APP_CLIENT_IMAGE_NAME }}:${{ secrets.APP_CLIENT_IMAGE_TAG }}
          cd ${{ secrets.SERVER_LOCATION }}
          ./kubectl get pods | grep app-client | awk '{print $1}' | xargs ./kubectl delete pod
    
    - name: Remove .env file
      run: |
          cd ./app_client
          rm .env
